[{
  "model": "main_app.resource",
  "pk": 1,
  "fields": {
    "name": "single_link_node",
    "description": "A single link node is a collection of data which also contains one reference point to another node in memory.",
    "img_url": "https://upload.wikimedia.org/wikipedia/commons/5/5d/Single_node1.jpg"
  }
}, {
  "model": "main_app.resource",
  "pk": 2,
  "fields": {
    "name": "list-head",
    "description": "The head of a list is a property that contains a reference to a piece of data that is to be interpreted as the beginning of that list.",
    "img_url": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/Linkedlist.png"
  }
}, {
  "model": "main_app.resource",
  "pk": 3,
  "fields": {
    "name": "list-size",
    "description": "List size is an integer value that initializes at 0 and is iterated upwards by 1 for every new value carrying node that is added to the list and iterated downward by 1 for every value carrying node that is removed from the list.",
    "img_url": "http://web.augsburg.edu/~crockett/210/graphics/linked_list_four_nodes.jpg"
  }
}, {
  "model": "main_app.resource",
  "pk": 4,
  "fields": {
    "name": "list-push",
    "description": "Push is a method which adds a node to the end, or tail, of a linked list",
    "img_url": "http://pages.cs.wisc.edu/~paton/readings/Old/fall01/STACKS-AND-QUEUES-FIGURES/ll-push.gif"
  }
}, {
  "model": "main_app.resource",
  "pk": 5,
  "fields": {
    "name": "list-pop",
    "description": "Pop is a method which removes the first, or head, item from a linked list and returns it's value.",
    "img_url": "http://pages.cs.wisc.edu/~vernon/cs367/notes/STACKS-AND-QUEUES-FIGURES/ll-pop.gif"
  }
}, {
  "model": "main_app.resource",
  "pk": 6,
  "fields": {
    "name": "list-peek",
    "description": "Peek is a method that returns the value of the front, or head, element of a list without removing it from the list",
    "img_url": "https://picsum.photos/id/605/100/100"
  }
}, {
  "model": "main_app.resource",
  "pk": 7,
  "fields": {
    "name": "list-is-empty",
    "description": "Is Empty is a method which determines whether a linked list has any value bearing elements and returns a boolean.",
    "img_url": "https://www.w3resource.com/w3r_images/Python-data-type-list-excercise-8.png"
  }
}, {
  "model": "main_app.resource",
  "pk": 8,
  "fields": {
    "name": "list-tail",
    "description": "The tail of a list is a property that contains a pointer to some piece of data that should be treated as the last item in that list.",
    "img_url": "https://www.cpp.edu/~ftang/courses/CS240/lectures/img/linked1.gif"
  }
}, {
  "model": "main_app.resource",
  "pk": 9,
  "fields": {
    "name": "list-enqueue",
    "description": "Enqueue adds a new element to the back, or tail, of a First In First Out list.",
    "img_url": "https://adnan-alam.github.io/images/queue.png"
  }
}, {
  "model": "main_app.resource",
  "pk": 10,
  "fields": {
    "name": "list-dequeue",
    "description": "Dequeue removes an element from the front, or head, of a First In First Out list.",
    "img_url": "https://adnan-alam.github.io/images/queue.png"
  }
}, {
  "model": "main_app.resource",
  "pk": 11,
  "fields": {
    "name": "binary-node",
    "description": "A single node with left and right pointers.",
    "img_url": "http://www.cs.nuim.ie/~dkelly/CS100-2/Binary%20Trees_files/image001.gif"
  }
}, {
  "model": "main_app.resource",
  "pk": 12,
  "fields": {
    "name": "tree-root",
    "description": "The root node of an out tree containing reference to all sub-trees.",
    "img_url": "https://www.researchgate.net/profile/Jose_Sa3/publication/303773171/figure/fig2/AS:391407152975874@1"
  }
}, {
  "model": "main_app.resource",
  "pk": 13,
  "fields": {
    "name": "binary-tree-insert",
    "description": "Inserts item into the shallowest available node in order",
    "img_url": "https://i2.wp.com/www.techiedelight.com/wp-content/uploads/Insert-into-BST.png?zoom=2&resize=408%2C3"
  }
}, {
  "model": "main_app.resource",
  "pk": 14,
  "fields": {
    "name": "binary-tree-search",
    "description": "Search an ordered binary tree for a given input",
    "img_url": "https://miro.medium.com/max/900/1*OmRV7P0YluY2ToRj44jKGA.gif"
  }
}, {
  "model": "main_app.resource",
  "pk": 15,
  "fields": {
    "name": "binary-tree-traversal-preorder",
    "description": "Traverse tree from parent nodes to left-most nodes to right-most nodes",
    "img_url": "https://www.gatevidyalay.com/wp-content/uploads/2018/07/Preorder-Traversal-Example.png"
  }
}, {
  "model": "main_app.resource",
  "pk": 16,
  "fields": {
    "name": "binary-tree-traversal-levelorder",
    "description": "A depth first traversal of the entire tree",
    "img_url": "https://raw.githubusercontent.com/sumitc91/data/master/askgif-blog/7833549b-eb6c-47f7-a6b0-1364f1434"
  }
}]